# app.py
# executable dash app

# Import required libraries and modules
import dash
from dash import dcc
from dash import html
from data_visualization import create_jobs_by_source_bar_chart, create_choropleth_map, update_simply_figure, create_bar_chart
from data_visualization import job_title_wordcloud, skills_wordcloud, get_unique_job_titles_simply, get_unique_job_titles_indeed, update_indeed_figure
from data_visualization import create_salary_box_plot, get_valid_options, create_job_type_cards, make_logo
from data_visualization import indeed_pie_chart, simply_hired_pie_chart, dice_pie_chart, generate_stacked_bar_chart
from dash.dependencies import Input, Output
import dash_bootstrap_components as dbc

# Create a Dash app instance with external_stylesheets
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP], suppress_callback_exceptions=True)
# (Above) indeed-job-title-dropdown, job-title-dropdown, indeed-salary-graph & salary-graph not found
# If you are assigning callbacks to components that are generated by other callbacks 
# (and therefore not in the initial layout), you can suppress this exception by 
# setting suppress_callback_exceptions=True`.

# Get the base64 encoded wordcloud image
wordcloud_base64 = job_title_wordcloud()

# Define the app layout with various components
app.layout = html.Div([

    # Create job type cards
    create_job_type_cards(),

    # Add a div with a specified height
    html.Div(style={'height': '30px'}),

    # Add tabs for Descriptive Analytics and Predictive Analytics
    dcc.Tabs([
        dcc.Tab(label='Descriptive Analytics', children=[
            html.Div(style={'height': '30px'}),

            # Wordclouds header & divider/spacer
            html.H1("Wordclouds", style={'text-align': 'center', 'margin-top': '50px'}),
            html.Div(style={'height': '20px'}),

            #Specifying the row & columns w/ dash bootstrap components
            #Allows wordcloud images to be displayed next to each other
            dbc.Row([
                dbc.Col([
                    html.H3("Job Title Wordcloud", style={'text-align': 'center', 'margin-top': '50px'}),
                    html.Img(src='data:image/png;base64,{}'.format(job_title_wordcloud()), style={'width': '100%'})
                ], width=6),
                dbc.Col([
                    html.H3("Skills Wordcloud", style={'text-align': 'center', 'margin-top': '50px'}),
                    html.Img(src='data:image/png;base64,{}'.format(skills_wordcloud()), style={'width': '100%'})
                ], width=6)
            ]),

            # Companies with Most Job Listings (w/ Pictures) Header & logo function calls to display pictures
            html.H2("Companies with Most Job Listings", style={'text-align': 'center', 'margin-top': '50px'}),
            html.Div([
                make_logo("Randstad Technologies"),
                make_logo("Motion Recruitment"),
                make_logo("TikTok"),
                make_logo("Comcast")
            ], style={'display': 'flex', 'justify-content': 'center', 'align-items': 'center', 'margin-bottom': '50px'}),

            # 2023 Job Listings Header
            html.H1("2023 Job Listings", style={'text-align': 'center', 'margin-top': '50px'}),
            html.Div(style={'height': '20px'}),

            # Radio buttons to select between Job Listings by Source and by State
            dcc.RadioItems(
                id='job-listings-radio',
                options=[
                    {'label': 'Jobs by State', 'value': 'by_state'},
                    {'label': 'Jobs by Source', 'value': 'by_source'},
                    {'label': 'Top 10 Job States', 'value': 'highest_jobs_by_state'},
                    {'label': 'Bottom 10 Job States', 'value': 'lowest_jobs_by_state'}
                ],
                value='by_state',
                style={
                    'display': 'flex',
                    'flex-direction': 'column',
                    'align-items': 'center'
                }
            ),

            # Container for the Job Listings graph
            html.Div(id='job-listings-container'),

            # Job Titles by State & Salary Header
            html.H1("Job Titles by State & Salary", style={'text-align': 'center', 'margin-top': '50px'}),
            html.Div(style={'height': '20px'}),

            # Radio buttons to select between Simply Hired and Indeed
            dcc.RadioItems(
                id='job-source',
                options=[
                    {'label': 'Simply Hired', 'value': 'simply_hired'},
                    {'label': 'Indeed', 'value': 'indeed'}
                ],
                value='simply_hired',
                style={
                    'display': 'flex',
                    'flex-direction': 'column',
                    'align-items': 'center'
                }
            ),

            # Dropdowns for median salaries per job title header
            html.H1("Median Salaries per Job Title", style={'text-align': 'center', 'margin-top': '50px'}),
            html.Div(id='job-selection-container'),
            # (Above) This container is used to hold and display the content related to job selection, 
            # specifically the dropdown and the graph for job titles by state and salary.
            html.Div([
                dcc.Dropdown(
                    id='type-dropdown',
                    options=[{'label': job_type, 'value': job_type} for job_type in ['Remote', 'Hybrid', 'Onsite']],
                    value='Onsite'
                ),
                dcc.Dropdown(
                    id='title-dropdown',
                    options=[{'label': job_title, 'value': job_title} for job_title in ['Data Engineer', 'Data Analyst', 'Data Scientist', 'Data Architect']],
                    value='Data Engineer'
                ),
                dcc.Dropdown(
                    id='salary_type-dropdown',
                    options=[{'label': salary_type, 'value': salary_type} for salary_type in ['Yearly', 'Hourly']],
                    value='Yearly'
                ),

                # Graph for Median Salaries
                dcc.Graph(id='median-salary-graph')
            ]),

            # Top 5 by Source
            html.H1("Top 5 Job Titles by Source", style={'text-align': 'center', 'margin-top': '50px'}),
            dcc.RadioItems(
                id='top-5-source-radio',
                options=[
                    {'label': 'Indeed', 'value': 'indeed'},
                    {'label': 'Simply Hired', 'value': 'simply_hired'},
                    {'label': 'Dice', 'value': 'dice'}
                ],
                value='indeed',
                style={
                    'display': 'flex',
                    'flex-direction': 'column',
                    'align-items': 'center'
                }
            ),
            html.Div(id='top-5-source-container'),

        ]),



        #Predictive Analytics tab
        dcc.Tab(label='Predictive Analytics', children=[
            
            # Bar chart for jobs by posted_date
            html.H1("Jobs Timeline by Date", style={'text-align': 'center', 'margin-top': '50px'}),
            dcc.Graph(
                id='jobs-by-posted-date',
                figure=create_bar_chart()
            ),

        ]),
    ])
])


# This callback updates the 'job-selection-container' based on the selected value from the 'job-source' radio buttons.
@app.callback(
    Output('job-listings-container', 'children'),
    Input('job-listings-radio', 'value')
)
def update_job_listings_container(job_listings_value):
    if job_listings_value == 'by_source':
        return dcc.Graph(
            id='jobs-by-source',
            figure=create_jobs_by_source_bar_chart()
        )
    elif job_listings_value == 'by_state':
        return dcc.Graph(
            id='jobs-by-state',
            figure=create_choropleth_map()
        )
    elif job_listings_value == 'highest_jobs_by_state':
        return dcc.Graph(
            id='highest-jobs-by-state',
            figure=generate_stacked_bar_chart(top_states_flag=True, n_largest=10)
        )
    elif job_listings_value == 'lowest_jobs_by_state':
        return dcc.Graph(
            id='lowest-jobs-by-state',
            figure=generate_stacked_bar_chart(top_states_flag=False, n_smallest=10)
        )

# This callback updates the 'job-selection-container' based on the selected value from the 'job-source' radio buttons.
@app.callback(
    Output('job-selection-container', 'children'),
    Input('job-source', 'value')
)
def update_job_selection_container(job_source):
    if job_source == 'simply_hired':
        return [
            html.Div(style={'height': '20px'}),
            dcc.Dropdown(
                id='job-title-dropdown',
                options=[{'label': job_title, 'value': job_title} for job_title in get_unique_job_titles_simply()],
                value='Data Engineer'
            ),
            dcc.Graph(id='salary-graph'),
        ]
    else:
        return [
            html.Div(style={'height': '20px'}),
            dcc.Dropdown(
                id='indeed-job-title-dropdown',
                options=[{'label': job_title, 'value': job_title} for job_title in get_unique_job_titles_indeed()],
                value='Data Engineer'
            ),
            dcc.Graph(id='indeed-salary-graph'),
        ]

# This callback updates the 'salary-graph' figure based on the selected value from the 'job-title-dropdown' (Simply Hired).
@app.callback(
    Output('salary-graph', 'figure'),
    Input('job-title-dropdown', 'value')
)
def display_figure(selected_job_title):
    return update_simply_figure(selected_job_title)

# This callback updates the 'indeed-salary-graph' figure based on the selected value from the 'indeed-job-title-dropdown'.
@app.callback(
    Output('indeed-salary-graph', 'figure'),
    Input('indeed-job-title-dropdown', 'value')
)
def display_indeed_figure(selected_job_title):
    return update_indeed_figure(selected_job_title)

# This callback updates the 'median-salary-graph' figure based on the selected values from the dropdowns.
@app.callback(
    Output('median-salary-graph', 'figure'),
    [Input('type-dropdown', 'value'), Input('title-dropdown', 'value'), Input('salary_type-dropdown', 'value')]
)
def update_salary_graph(selected_job_type, selected_job_title, selected_salary_type):
    return create_salary_box_plot(selected_job_type, selected_job_title, selected_salary_type)

# This callback updates the options of the dropdowns to prevent invalid combinations that would result in empty graphs.
@app.callback(
    [Output('type-dropdown', 'options'),
    Output('title-dropdown', 'options'),
    Output('salary_type-dropdown', 'options')],
    Input('type-dropdown', 'value'),
    Input('title-dropdown', 'value'),
    Input('salary_type-dropdown', 'value')
)
def update_dropdown_options(selected_job_type, selected_job_title, selected_salary_type):
    # Get the valid options from the data source using the imported get_valid_options function
    valid_options = get_valid_options()

    # Filter the valid options based on the current selections
    # Note: We use the OR operator (|) to include any row that matches at least one of the conditions
    valid_options = valid_options[(valid_options['type'] == selected_job_type) |
                                  (valid_options['title'] == selected_job_title) |
                                  (valid_options['salary_type'] == selected_salary_type)]

    # Extract unique values for each dropdown from the filtered valid options
    job_type_options = valid_options['type'].unique()
    job_title_options = valid_options['title'].unique()
    salary_type_options = valid_options['salary_type'].unique()

    # Return the updated dropdown options as lists of dictionaries with 'label' and 'value' keys
    return [{'label': opt, 'value': opt} for opt in job_type_options], \
           [{'label': opt, 'value': opt} for opt in job_title_options], \
           [{'label': opt, 'value': opt} for opt in salary_type_options]

# This callback updates the 'top-5-source-container' based on the selected value from the 'top-5-source-radio'.
@app.callback(
    Output('top-5-source-container', 'children'),
    Input('top-5-source-radio', 'value')
)
def update_top_5_source_container(top_5_source_value):
    if top_5_source_value == 'indeed':
        return dcc.Graph(id='indeed-top-5-pie', figure=indeed_pie_chart())
    elif top_5_source_value == 'simply_hired':
        return dcc.Graph(id='simply-hired-top-5-pie', figure=simply_hired_pie_chart())
    else:
        return dcc.Graph(id='dice-top-5-pie', figure=dice_pie_chart())

# Starts the web server with debug mode enabled, 
# allowing for live updates as changes are made to the code.
if __name__ == '__main__':
    app.run_server(debug=True)